# Load environment variables from .env.docker file
# Copy .env.docker.example to .env.docker and fill in your values
services:
  postgres:
    image: postgres:13
    container_name: tobancv-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-toban_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-tobancv}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-toban_admin} -d ${POSTGRES_DB:-tobancv}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tobancv-backend
    volumes:
      # Mount the code for hot-reloading, but exclude some directories
      - ./backend:/app:cached
      # Create anonymous volume to prevent overwriting container directories
      - /app/__pycache__
    env_file:
      - ./.env.docker
    # Explicit environment variables that override env_file
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-toban_admin}:${POSTGRES_PASSWORD:-postgres}@postgres/${POSTGRES_DB:-tobancv}
      # Use Slack variables from .env.docker file
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      # API and Frontend URLs
      - API_URL=http://localhost:8000
      - FRONTEND_URL=${NGROK_URL:-http://localhost:5173}
      # Add ngrok URL to CORS allowed origins
      - ADDITIONAL_CORS_ORIGINS=${NGROK_URL:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    # Use restart policy to handle potential startup failures
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tobancv-frontend
    volumes:
      # Mount code for hot-reloading but with better performance
      - ./frontend:/app:cached
      # Use anonymous volume to prevent node_modules from being overwritten
      - /app/node_modules
    env_file:
      - ./.env.docker
    environment:
      # API URL for browser requests - use relative path to work with frontend proxy
      - VITE_API_URL=/api/v1
      # Frontend URL for redirects (use ngrok tunnel if available)
      - VITE_FRONTEND_URL=${NGROK_URL:-http://localhost:5173}
      - VITE_SUPABASE_URL=${SUPABASE_URL:-your_supabase_url}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-your_supabase_anon_key}
      - VITE_AUTH_REDIRECT_URI=${NGROK_URL:-http://localhost:5173}/auth/callback
      - VITE_DEV_MODE=true
      - VITE_ENABLE_NOTION_INTEGRATION=true
      - VITE_ENABLE_SLACK_INTEGRATION=true
      - VITE_ENABLE_GITHUB_INTEGRATION=true
      # Variables for Slack integration in the frontend
      - VITE_SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
    ports:
      - "5173:5173"
    depends_on:
      - backend
    # Use restart policy to handle potential startup failures
    restart: unless-stopped

volumes:
  postgres_data:
